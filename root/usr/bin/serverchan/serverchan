#!/bin/bash

function get_config() {
    serverchan_enable=`uci get serverchan.serverchan.serverchan_enable`> /dev/null 2>&1
    serverchan_sckey=`uci get serverchan.serverchan.sckey`> /dev/null 2>&1
    serverchan_ip=`uci get serverchan.serverchan.serverchan_ip`> /dev/null 2>&1
    serverchan_up=`uci get serverchan.serverchan.serverchan_up`> /dev/null 2>&1
    serverchan_down=`uci get serverchan.serverchan.serverchan_down`> /dev/null 2>&1
    serverchan_sheep=`uci get serverchan.serverchan.serverchan_sheep`> /dev/null 2>&1
    if [ -z "$serverchan_sheep" ] ; then serverchan_sheep="0"; fi
    starttime=`uci get serverchan.serverchan.starttime` >/dev/null 2>&1
    endtime=`uci get serverchan.serverchan.endtime` >/dev/null 2>&1
    #sleeptime=`uci get serverchan.serverchan.serverchan_sleeptime` >/dev/null 2>&1
    #if [ -z "$sleeptime" ] ; then sleeptime="60";fi
    sleeptime=60
    cpuload_enable=`uci get serverchan.serverchan.cpuload_enable` >/dev/null 2>&1
    cpuload=`uci get serverchan.serverchan.cpuload` >/dev/null 2>&1
    temperature_enable=`uci get serverchan.serverchan.temperature_enable` >/dev/null 2>&1
    temperature=`uci get serverchan.serverchan.temperature` >/dev/null 2>&1
    dir="/tmp/serverchan/"
    debuglevel=`uci get serverchan.serverchan.debuglevel` >/dev/null 2>&1
    #debuglevel="5"
    if [ -z "$debuglevel" ] ; then logfile="/dev/null";else logfile="/tmp/serverchan/server_chan.log"; fi
    if [ -z "$serverchan_enable" ] ; then echo "`date "+%H:%M:%S"` 【！！！】无法读取程序开关 " >> ${logfile}; fi
    if [ -z "$serverchan_enable" ] || [ "$serverchan_enable" -eq "0" ] ; then exit; fi
    if [ -z "$serverchan_sckey" ] ; then echo "`date "+%H:%M:%S"` 【！！！】无法读取 SCKEY" >> ${logfile}; fi
    if [ -z "$serverchan_sckey" ] ; then exit; fi
    if [ -z "$serverchan_sckey" ] && [ "${#serverchan_sckey}" -lt  "50" ] ; then echo "`date "+%H:%M:%S"` 【！！！】请填入正确的 SCKEY " >> ${logfile}; fi
    if [ -z "$serverchan_ip" ] || [ "$serverchan_ip" -ne "0" ] && [ "$serverchan_ip" -ne "1" ] ; then echo "`date "+%H:%M:%S"` 【！！！】无法读取 ip 变化通知 开关" >> ${logfile}; fi
    if [ -z "$serverchan_up" ] || [ "$serverchan_up" -ne "0" ] && [ "$serverchan_up" -ne "1" ] ; then echo "`date "+%H:%M:%S"` 【！！！】无法读取 设备上线提醒 开关" >> ${logfile}; fi
    if [ -z "$serverchan_down" ] || [ "$serverchan_down" -ne "0" ] && [ "$serverchan_down" -ne "1" ] ; then echo "`date "+%H:%M:%S"` 【！！！】无法读取 设备下线提醒 开关" >> ${logfile}; fi
}
#等待 5s，确保 luci 设置已保存
sleep 5

# 检测程序开关
function enable_detection() {
    serverchan_enable=`uci get serverchan.serverchan.serverchan_enable` > /dev/null 2>&1
    if [ -z "$serverchan_enable" ] || [ "$serverchan_enable" -eq "0" ] ; then kill -9 `pgrep -f serverchan` && exit; fi
}

#生成 Client 缓存
function create_client_cache() {
    rm -f ${dir}client_list_cache
    DHCP_LIST=$( cat /tmp/dhcp.leases  | awk '{if($4=="*" && $3!=null)print $3","$2;else if($3!=null && $4!=null)print $3","$4}' )
    for ip in $DHCP_LIST; do
        if [ ! -z "$ip" ] || [ "$ip" -ne "," ] ; then
            ip_addr=$(echo -n $ip | awk -F',' '{print $1}')
            ip_name=$(echo -n $ip | awk -F',' '{print $2}')
            interface=$(cat /proc/net/arp | grep "$ip_addr " | awk '{print $6}')
            if [ "${#ip_name}" -gt  "20" ] ; then ip_name=`echo -n ${ip_name:0:20}"..."`; fi
            if [ ! -z "$ip_addr" ] && [ ! -z "$ip_name" ]; then
                if [ ! -z "$interface" ]; then
                    flag=$(cat /proc/net/arp | grep "$ip_addr " | awk '{print $3}')
                else
                    flag="0x0"
                fi
                echo "$ip_addr,$ip_name,$flag" >> ${dir}client_list_cache
            fi
        fi
    done
}

function clean_client_cache() {
    CACHE=$(cat ${dir}client_list_cache | awk -F"," '{print $1}')
    for ip in $CACHE;do
        if [ "$(grep "$ip" /tmp/dhcp.leases | wc -l)" == "0" ]; then sed -i "/$ip/d" ${dir}client_list_cache; fi
    done
}

function serverchan_cron() {
    send_mode=`uci get serverchan.serverchan.send_mode` > /dev/null 2>&1
    if [ ! -z "$send_mode" ] ; then
        if [ "$send_mode" -eq "1" ] ; then
            regular_time=`uci get serverchan.serverchan.regular_time` > /dev/null 2>&1
            if ( echo `crontab -l` | grep "serverchan" | grep -q " $regular_time " ); then
                return 0
            elif ( echo `crontab -l` | grep -q "serverchan" ); then
                crontab -l > conf && sed -i "/serverchan/d" conf && crontab conf && rm -f conf
                crontab -l > conf && echo -e "0 $regular_time * * * /usr/bin/serverchan/serverchan send &" >> conf && crontab conf && rm -f conf
                /etc/init.d/cron stop
                /etc/init.d/cron start
            else
                crontab -l > conf && echo -e "0 $regular_time * * * /usr/bin/serverchan/serverchan send &" >> conf && crontab conf && rm -f conf
                /etc/init.d/cron stop
                /etc/init.d/cron start
            fi
        elif [ "$send_mode" -eq "2" ] ; then
            interval_time=`uci get serverchan.serverchan.interval_time`>/dev/null 2>&1
            if ( echo `crontab -l` | grep "serverchan" | grep -q "*/$interval_time " ); then
                echo "" >/dev/null
            elif ( echo `crontab -l` | grep -q "serverchan" ); then
                crontab -l > conf && sed -i "/serverchan/d" conf && crontab conf && rm -f conf
                crontab -l > conf && echo -e "0 */$interval_time * * * /usr/bin/serverchan/serverchan send &" >> conf && crontab conf && rm -f conf
                /etc/init.d/cron stop
                /etc/init.d/cron start
            else
                crontab -l > conf && echo -e "0 $regular_time * * * /usr/bin/serverchan/serverchan send &" >> conf && crontab conf && rm -f conf
                /etc/init.d/cron stop
                /etc/init.d/cron start
            fi
        fi
    elif [ -z "$send_mode" ] ; then
        if ( echo `crontab -l` | grep -q "serverchan" ); then
            crontab -l > conf && sed -i "/serverchan/d" conf && crontab conf && rm -f conf
            /etc/init.d/cron stop
            /etc/init.d/cron start
        fi
    fi
}

#免打扰检测
function serverchan_disturb() {
    if [ ! -z "$serverchan_sheep" ] && [ "$serverchan_sheep" -eq "1" ] && [ ! -z "$starttime" ] && [ ! -z "$endtime" ] ;then
        if [ `date +%H` -ge $endtime -a $starttime -lt $endtime ] || [ `date +%H` -lt $starttime -a $starttime -lt $endtime ] || [ `date +%H` -lt $starttime -a `date +%H` -ge $endtime -a $starttime -gt $endtime ] ; then
            unset title
            unset content
            rm -f ${dir}title >/dev/null 2>&1
            rm -f ${dir}content >/dev/null 2>&1
        fi
    fi
}

#清理日志
function clean_log() {
    logrow=$(grep -c "" ${logfile})
    if [ $logrow -gt 500 ] ;then
        #cat /dev/null > ${logfile}
        sed -i '1,100d' ${logfile}
        echo "`date "+%H:%M:%S"`  【清理】日志超出上限，删除前 100 条" >> ${logfile}
    fi
}

function serverchan_send() {
    serverchan_disturb
	if [ -f "${dir}title" ] && [ -f "${dir}content" ]; then
        title=`cat ${dir}title`
	    content=`cat ${dir}content`
        if [ ! -z "$title" ] && [ ! -z "$content" ] ; then
            nowtime=`date "+%Y-%m-%d %H:%M:%S"`
            curl -s "http://sc.ftqq.com/$serverchan_sckey.send?text=${title}" -d "&desp=${nowtime}%0D%0A%0D%0A${content}" >/dev/null
            unset title
            unset content
            rm -f ${dir}title >/dev/null 2>&1
            rm -f ${dir}content >/dev/null 2>&1
        fi
	fi
}

function serverchan_init() {
    get_config
    mkdir -p ${dir}
    network_enable="200"
    rm -f ${dir}title >/dev/null 2>&1
    rm -f ${dir}content >/dev/null 2>&1
    rm -f ${dir}serverchan.lock >/dev/null 2>&1
    rm -r ${dir}client_list_cache >/dev/null 2>&1
    Temperature_n=0
    cpuload_n=0
    send_enable=0
    create_client_cache
    echo "`date "+%H:%M:%S"` 【初始化】载入配置文件" >> ${logfile}
    if [ ! -z "$debuglevel" ] && [ "$debuglevel" -ne "1" ] ; then  echo "`date "+%H:%M:%S"` 【初始化】工作目录为 $dir " >> ${logfile};fi
    if [ ! -z "$debuglevel" ] && [ "$debuglevel" -ne "1" ] ; then  echo "`date "+%H:%M:%S"` 【初始化】log 目录为 $logfile " >> ${logfile};fi
}
serverchan_init

#检测设备状态
function check_client() {
    if [ ! -z "$serverchan_up" ] && [ "$serverchan_up" -eq "1" ] ; then
        echo "`date "+%H:%M:%S"` 【检测】检测设备上线" >> ${logfile}
        DHCP_LIST=$( cat /tmp/dhcp.leases  | awk '{if($4=="*" && $3!=null)print $3","$2;else if($3!=null && $4!=null)print $3","$4}' )
        title="设备状态通知"
        rm -f ${dir}content
        unset content
        for ip in $DHCP_LIST; do
            # 如果 ip 列表不为空
            if [ ! -z "$ip" ] || [ "$ip" -ne "," ] ; then
                ip_addr=$(echo -n $ip | awk -F',' '{print $1}')
                ip_name=$(echo -n $ip | awk -F',' '{print $2}')
                # 新设备
                if [ "$(grep "$ip_addr" ${dir}client_list_cache | wc -l)" == "0" ]; then
                    content="%0D%0A%0D%0A---%0D%0A%0D%0A#### **新设备连接**%0D%0A%0D%0A - $ip_addr / $(cat ${dir}client_list_cache | grep "${ip_addr}," | awk -F"," '{print $2}')"
                else
                    flag=$(cat /proc/net/arp | grep "$ip_addr " | awk '{print $3}')
                    interface=$(cat /proc/net/arp | grep "$ip_addr " | awk '{print $6}')
                    old_status=$(cat ${dir}client_list_cache | grep "${ip_addr}," | awk -F"," '{print $3}')
                    if [ "$flag" != "$old_status" ] && [ ! -z "${old_status}" ]; then
                        if [ "$flag" == "0x2" ]; then
                            content=${content}"%0D%0A%0D%0A---%0D%0A%0D%0A#### **设备重新连接**%0D%0A%0D%0A - $ip_addr / $(cat ${dir}client_list_cache | grep "${ip_addr}," | awk -F"," '{print $2}')"
                        else
                            if [ "$( arping -I $interface -c 1 -f -w 2 $ip_addr | grep ms | wc -l)" == "0" ] && [ ! -z "$interface" ]; then
                                content=${content}"%0D%0A%0D%0A---%0D%0A%0D%0A#### **设备断开连接**%0D%0A%0D%0A - $ip_addr / $(cat ${dir}client_list_cache | grep "${ip_addr}," | awk -F"," '{print $2}')"
                            fi
                        fi
                        sed -i "/$ip_addr/d" ${dir}client_list_cache
                        echo "$ip_addr,$ip_name,$flag" >> ${dir}client_list_cache
                    fi
                fi
            fi
        done
        echo -n $content >> ${dir}content
        echo -n $title > ${dir}title
        serverchan_send
        clean_client_cache
    fi
}

#负载状态报警
function load_notify() {
    if [ ! -z "$cpuload_enable" ] && [ "$cpuload_enable" -eq "1" ] ; then
        if [ ! -z "$debuglevel" ] && [ "$debuglevel" -ne "1" ] ; then  echo "`date "+%H:%M:%S"` 【负载】正在检测 CPU 负载" >> ${logfile};fi
        cpu_fuzai=`cat /proc/loadavg | awk '{print $1}'`
        cpuload=`uci get serverchan.serverchan.cpuload`>/dev/null 2>&1
        
        if [ ! -z "$cpuload" ] && [ `expr $cpu_fuzai \> $cpuload` -eq "1" ] ; then
            cpuload_n=$(($cpuload_n+1))
            echo "`date "+%H:%M:%S"` 【！！警报！！】当前 CPU 负载过高: ${cpu_fuzai}" >> ${logfile}
        elif [ "$cpuload_n" -ge "5" ] ;then
            cpuload_n=$(($cpuload_n+1))
        else
            cpuload_n=0
            if [ ! -z "$debuglevel" ] && [ "$debuglevel" -ne "1" ] ; then  echo "`date "+%H:%M:%S"`  CPU 负载正常：$cpu_fuzai" >> ${logfile};fi
        fi

        if [ "$cpuload_n" -eq "5" ] ;then
            title="路由器报警！"
            echo "`date "+%H:%M:%S"` 【微信推送】当前 CPU 负载过高: ${cpu_fuzai}" >> ${logfile}
            content="%0D%0A%0D%0A---%0D%0A%0D%0A""#### **处理器负载过高**%0D%0A%0D%0A - **处理器负载已连续五分钟超过预设**%0D%0A%0D%0A > 接下来一小时不再提示%0D%0A%0D%0A - **当前负载：**${cpu_fuzai}%0D%0A%0D%0A - **负载阈值：**${cpuload}"
            echo $title > ${dir}title
            echo -n $content >> ${dir}content
            serverchan_send
        elif [ "$cpuload_n" -ge "60" ] ;then
            cpuload_n=0
        fi
    fi
}

#温度状态报警
function temper_notify() {
    if [ ! -z "$temperature_enable" ] && [ "$temperature_enable" -eq "1" ] ; then
        if [ ! -z "$debuglevel" ] && [ "$debuglevel" -ne "1" ] ; then  echo "`date "+%H:%M:%S"` 【温度】正在检测 CPU 温度" >> ${logfile};fi
        cpu_wendu=`sensors | awk 'NR==3{print $3}' | cut -d"+" -f2 | cut -d"." -f1`
        temperature=`uci get serverchan.serverchan.temperature`>/dev/null 2>&1
        if [ ! -z "$temperature" ] && [ "$cpu_wendu" -gt "$temperature" ] ; then
            Temperature_n=$(($Temperature_n+1))
            echo "`date "+%H:%M:%S"` 【！！警报！！】当前 CPU 温度过高: ${cpu_wendu}" >> ${logfile}
        elif [ "$Temperature_n" -ge "5" ] ;then
            Temperature_n=$(($Temperature_n+1))
        else
            Temperature_n=0
            if [ ! -z "$debuglevel" ] && [ "$debuglevel" -ne "1" ] ; then  echo "`date "+%H:%M:%S"`  CPU 温度正常：$cpu_wendu" >> ${logfile};fi
        fi
        if [ "$Temperature_n" -eq "5" ] ;then
            title="路由器报警！"
            echo "`date "+%H:%M:%S"`  【微信推送】当前 CPU 温度过高: ${cpu_wendu}" >> ${logfile}
            content="%0D%0A%0D%0A---%0D%0A%0D%0A""#### **处理器温度过高**%0D%0A%0D%0A - **处理器温度已连续五分钟超过预设**%0D%0A%0D%0A > 接下来一小时不再提示%0D%0A%0D%0A - **当前温度：**${cpu_wendu}%0D%0A%0D%0A - **温度阈值：**${temperature}"
            echo $title >${dir}title
            echo -n $content >>${dir}content
            serverchan_send
        elif [ "$Temperature_n" -ge "60" ] ;then
            Temperature_n=0
        fi
    fi
}

#外网IP变化
function check_wan_ip() {
    if [ ! -z "$serverchan_ip" ] && [ "$serverchan_ip" -eq "1" ] ; then
        if [ ! -z "$debuglevel" ] && [ "$debuglevel" -ne "1" ] ; then  echo "`date "+%H:%M:%S"`  【外网IP】正在检测外网IP变化" >> ${logfile};fi
        nowtime=`date "+%Y-%m-%d %H:%M:%S"`
        wanIP=$(ubus call network.interface.wan status | grep '\"address\"' | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
        #查询ip历史记录
        if [ -f ${dir}ip ] ; then lastIP=$( cat "${dir}ip" ); else unset lastIP; fi
        #if [ "$wanIP"!="$lastIP" ] && [ ! -z "$wanIP" ] ; then
        if [ ! -z "$wanIP" ] && ( echo ${wanIP} | grep -w -q ${lastIP} );then
            if [ ! -z "$debuglevel" ] && [ "$debuglevel" -ne "1" ] ; then  echo "`date "+%H:%M:%S"`  IP 无变化，当前 ip 为 $lastIP" >> ${logfile};fi
        else
            echo "`date "+%H:%M:%S"`  当前 IP: ${wanIP}" >> ${logfile}
            echo "`date "+%H:%M:%S"`  上次 IP: ${lastIP}" >> ${logfile}
            echo "`date "+%H:%M:%S"`  【微信推送】当前IP：${wanIP}" >> ${logfile}
            echo -n $wanIP > ${dir}ip
            title="路由器状态变动"
            content="%0D%0A%0D%0A---%0D%0A%0D%0A""#### **外网地址变化**%0D%0A%0D%0A - **当前地址：**${wanIP}"
            echo $title >${dir}title
            echo -n $content >>${dir}content
            serverchan_send				
        fi
        if [ -f ${logfile} ] ; then clean_log;fi
    fi
}

function check_reboot() {
    uptime=$(cat /proc/uptime | awk '{print $1}' | cut -d"." -f1)
    if [ "$uptime" -le "110" ]; then
        reboot_time=$(date "+%Y-%m-%d_%H:%M:%S")
        title="路由器状态变动"
        content="%0D%0A%0D%0A---%0D%0A%0D%0A""#### **路由器已重启**%0D%0A%0D%0A - ${reboot_time}"
        echo $title >${dir}title
        echo -n $content >>${dir}content
        serverchan_send				
    fi
}

function send() {
	if [ ! -z "$debuglevel" ] && [ "$debuglevel" -ne "1" ] ; then  echo "`date "+%H:%M:%S"`  创建定时任务" >> ${logfile}; fi
	uci set serverchan.serverchan.send_enable=3
	uci commit serverchan
	unset title
	unset content
	send_content=""
	serverchan_cron
	send_title=`uci get serverchan.serverchan.send_title` > /dev/null 2>&1
	if [ -z "$send_title" ] ; then send_title="OpenWrt 路由状态："; fi
	router_status=`uci get serverchan.serverchan.router_status` > /dev/null 2>&1
    if [ ! -z "$router_status" ] && [ "$router_status" -eq "1" ] ; then send_content=${send_content}"%0D%0A%0D%0A---%0D%0A%0D%0A#### **系统运行状态**%0D%0A%0D%0A";fi
    if [ ! -z "$router_status" ] && [ "$router_status" -eq "1" ] ; then send_content=${send_content}"%0D%0A%0D%0A""- **CPU使用率：**`top -n 1 |grep -i Cpu:| awk '{print $3": "$2" "$5": "$4}'`";fi
    if [ ! -z "$router_status" ] && [ "$router_status" -eq "1" ] ; then send_content=${send_content}"%0D%0A%0D%0A""- **平均负载：**`cat /proc/loadavg | awk '{print $1","$2","$3}'`";fi
    if [ ! -z "$router_status" ] && [ "$router_status" -eq "1" ] ; then send_content=${send_content}"%0D%0A%0D%0A""- **内存占用：**`free | grep [M]em | awk '{mem_total=$2 / 1024;mem_used=$3 / 1024;mem_percent=$3/$2*100.00;printf("%d MB / %d MB (%d%%)", mem_used,mem_total,mem_percent)}'`";fi
    if [ ! -z "$router_status" ] && [ "$router_status" -eq "1" ] ; then send_content=${send_content}"%0D%0A%0D%0A""- **当前连接数：**`cat /proc/sys/net/netfilter/nf_conntrack_count`";fi
    if [ ! -z "$router_status" ] && [ "$router_status" -eq "1" ] ; then send_content=${send_content}"%0D%0A%0D%0A""`cat /proc/uptime| awk -F. '{run_days=$1 / 86400;run_hour=($1 % 86400)/3600;run_minute=($1 % 3600)/60;run_second=$1 % 60;printf("- **运行时间：** %d 天 %d 时 %d 分 %d 秒",run_days,run_hour,run_minute,run_second)}'`";fi
	router_temp=`uci get serverchan.serverchan.router_temp` > /dev/null 2>&1
    if [ ! -z "$router_temp" ] && [ "$router_temp" -eq "1" ] ; then send_content=${send_content}"%0D%0A%0D%0A""---%0D%0A%0D%0A#### **设备温度**%0D%0A%0D%0A- **CPU：**`sensors | grep 'Core 0' | awk '{print $3}'`";fi
	router_wan=`uci get serverchan.serverchan.router_wan` > /dev/null 2>&1
    send_wanIP=$(ubus call network.interface.wan status | grep '\"address\"' | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
    if [ ! -z "$router_wan" ] && [ "$router_wan" -eq "1" ] ; then
        send_content=${send_content}"%0D%0A%0D%0A""---%0D%0A%0D%0A#### **WAN 信息**%0D%0A%0D%0A- **公网地址：**$send_wanIP"
        send_content=${send_content}"%0D%0A%0D%0A""`ubus call network.interface.wan status | grep \"uptime\" | sed $'s/\"uptime": //g'| sed $'s/\,//g'| awk -F. '{run_days=$1 / 86400;run_hour=($1 % 86400)/3600;run_minute=($1 % 3600)/60;run_second=$1 % 60;printf("- **在线时间：** %d 天 %d 时 %d 分 %d 秒",run_days,run_hour,run_minute,run_second)}'`"
    fi
    client_list=`uci get serverchan.serverchan.client_list` >/dev/null 2>&1
	if [ ! -z "$client_list" ] && [ "$client_list" -eq "1" ] ; then	
        if [ ! -z "$debuglevel" ] && [ "$debuglevel" -ne "1" ] ; then  echo "`date "+%H:%M:%S"`  检测客户端列表" >> ${logfile};fi
        send_content=${send_content}"%0D%0A%0D%0A---%0D%0A%0D%0A#### **在线设备**%0D%0A%0D%0A";
        IPLIST=$( cat ${dir}client_list_cache )
        for ip in $IPLIST; do
            ip_addr=$(echo -n "${ip}" | awk -F"," '{print $1}')
            ip_name=$(echo -n "${ip}" | awk -F"," '{print $2}')
		send_content=${send_content}"%0D%0A%0D%0A""- $ip_addr / "
		send_content=${send_content}"$ip_name"
        done
    fi
	send_title=$( echo $send_title | sed $'s/\ /%20/g'| sed $'s/\"/%22/g'| sed $'s/\#/%23/g'| sed $'s/\&/%26/g'| sed $'s/\,/%2C/g'| sed $'s/\//%2F/g'| sed $'s/\:/%3A/g'| sed $'s/\;/%3B/g'| sed $'s/\=/%3D/g'| sed $'s/\@/%40/g')
	if [ ! -z "$debuglevel" ] && [ "$debuglevel" -ne "1" ] ; then  echo "`date "+%H:%M:%S"`  进行 URL 编码，标题=$send_title" >> ${logfile};fi
	if [ -z "$send_content" ] ; then
		send_content="%0D%0A%0D%0A---%0D%0A%0D%0A - 你可能没有选择需要发送的项目%0D%0A%0D%0A---";
		echo "`date "+%H:%M:%S"`  【！！！】定时发送选项错误，请检查你的设置" >> ${logfile}
	fi
	nowtime=`date "+%Y-%m-%d %H:%M:%S"`
	curl -s "http://sc.ftqq.com/$serverchan_sckey.send?text=${send_title}" -d "&desp=${nowtime}%0D%0A%0D%0A${send_content}" >/dev/null

	uci set serverchan.serverchan.send_enable=0
	uci commit serverchan
	echo "`date "+%H:%M:%S"`  【微信推送】定时发送状态消息" >> ${logfile}
	exit
}

if [ "$1" ] ;then
	if [ $1="send" ] ;then send;fi
	exit
fi

while [ "$serverchan_enable" -eq "1" ] ;
do
    if [ -f ${logfile} ] ; then clean_log;fi
    serverchan_cron
    check_client
    load_notify
    temper_notify
    check_wan_ip
    check_reboot
    enable_detection
    sleep $sleeptime
continue
done
echo "`date "+%H:%M:%S"` 【！！！】程序未启用，退出脚本！" >> ${logfile}
exit